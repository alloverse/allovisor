# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  - name: isMain
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  - group: hooks-passwords

jobs:
- job: Mac
  pool:
    vmImage: 'macOS-11'
  steps:
  - script: sudo xcode-select -s /Applications/Xcode_12.4.app
    displayName: "Select Xcode 12.4"
  - script: brew update; brew upgrade cmake
    displayName: "Upgrade CMake"
  - task: CMake@1
    inputs:
      workingDirectory: 'build'
      cmakeArgs: "-G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release .."
  # Note: _CPack_Packages has symlink to /Applications which crashes the stupid CopyFiles
  - script: make package; rm -rf _CPack_Packages
    workingDirectory: build
    displayName: "Make"
  - script: bash rename-builds.sh
    displayName: "Rename builds"
  - task: CopyFiles@2
    displayName: "Stage artifacts"
    inputs:
      contents: |
        build/*.app/**
        build/*.dmg
        build/CMakeFiles/*.log
      targetFolder: $(Build.ArtifactStagingDirectory)
  - task: PublishBuildArtifacts@1
    displayName: "Publish artifacts"
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: Alloverse_visor-Mac-x64
  - task: S3Upload@1
    inputs:
      awsCredentials: 'aws-ci'
      regionName: 'eu-north-1'
      bucketName: 'alloverse-downloads-prod'
      globExpressions: '**/*.dmg'
      targetFolder: 'visor'
      filesAcl: 'public-read'
      sourceFolder: '$(Build.ArtifactStagingDirectory)'
      flattenFolders: true
  - bash: bash publish-build.sh mac
    displayName: "Publish build to site"
    condition: and(succeeded(), eq(variables.isMain, true))
    env: 
      PUBLISHING_SECRET: $(PublishingSecret)






- job: Windows
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: CMake@1
    inputs:
      workingDirectory: 'build'
      cmakeArgs: '-A x64 -G "Visual Studio 16 2019" ..'
  - task: VSBuild@1
    displayName: "Visual Studio build"
    inputs:
      msbuildArchitecture: 'x64'
      vsVersion: 16.0
      createLogFile: true
      solution: 'build\PACKAGE.vcxproj'
      configuration: MinSizeRel # Hangs in CreateWindow in Release????
  - script: bash rename-builds.sh
    displayName: "Rename builds"
  - task: CopyFiles@2
    displayName: "Stage artifacts"
    inputs:
      contents: |
        build/**/*win64.exe
        build/**/*.log
      targetFolder: $(Build.ArtifactStagingDirectory)
  - task: PublishBuildArtifacts@1
    displayName: "Publish artifacts"
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: Alloverse_visor-Windows-x64
  - task: S3Upload@1
    inputs:
      awsCredentials: 'aws-ci'
      regionName: 'eu-north-1'
      bucketName: 'alloverse-downloads-prod'
      sourceFolder: '$(Build.ArtifactStagingDirectory)'
      flattenFolders: true
      globExpressions: '**/*.exe'
      targetFolder: 'visor'
      filesAcl: 'public-read'
  - bash: bash publish-build.sh windows
    displayName: "Publish build to site"
    condition: and(succeeded(), eq(variables.isMain, true))
    env: 
      PUBLISHING_SECRET: $(PublishingSecret)





- job: OculusQuest
  pool:
    vmImage: 'macOS-11'
  steps:
  - script: 'sdkmanager --install "ndk;21.4.7075529" 2>&1 | head'
    displayName: "Install NDK 21.4.7075529"
    env:
      PATH: "/Users/runner/Library/Android/sdk/cmake/3.6.4111459/bin:/Applications/Android Studio.app/Contents/jre/jdk/Contents/Home/bin:~/Library/Android/sdk/platform-tools:~/Library/Android/sdk/tools/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin"
      ANDROID_HOME: "~/Library/Android/sdk"
  - task: DownloadSecureFile@1
    name: releaseKeys
    displayName: 'Download release signing keys'
    inputs:
      secureFile: 'android.release.keystore'
  - script: |
      echo Moving key into place...
      ln -s $(releaseKeys.secureFilePath) $(Build.Repository.LocalPath)/android.release.keystore
  - task: DownloadSecureFile@1
    name: keyPasswords
    displayName: 'Download signing passwords'
    inputs:
      secureFile: 'keys.properties'
  - script: |
      echo Moving key passwords into place...
      ln -s $(keyPasswords.secureFilePath) $(Build.Repository.LocalPath)/keys.properties
  - task: CMake@1
    inputs:
      workingDirectory: 'build'
      cmakeArgs: "-DCMAKE_TOOLCHAIN_FILE=/Users/runner/Library/Android/sdk/ndk/21.4.7075529/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_NATIVE_API_LEVEL=29 -DANDROID_BUILD_TOOLS_VERSION=30.0.4 -DANDROID_SDK=/Users/runner/Library/Android/sdk -DJAVA_HOME=\"/Applications/Android Studio.app/Contents/jre/jdk/Contents/Home\" -DANDROID_KEYSTORE=$(Build.Repository.LocalPath)/android.release.keystore -DANDROID_KEYSTORE_PASS=\"pass:$(RELEASE_STORE_PASSWORD)\" -DANDROID_KEY_PASS=\"pass:$(RELEASE_KEY_PASSWORD)\" -DANDROID_VARIANT=quest .."
  - script: env VERBOSE=1 make Alloverse
    workingDirectory: build
    displayName: "Make"
  - script: bash rename-builds.sh
    displayName: "Rename builds"
  - task: CopyFiles@2
    displayName: "Stage artifacts"
    inputs:
      contents: |
        build/*.apk
      targetFolder: $(Build.ArtifactStagingDirectory)
  - task: PublishBuildArtifacts@1
    displayName: "Publish artifacts"
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: Alloverse_visor-Quest
  - task: S3Upload@1
    inputs:
      awsCredentials: 'aws-ci'
      regionName: 'eu-north-1'
      bucketName: 'alloverse-downloads-prod'
      globExpressions: '**/*.apk'
      targetFolder: 'visor'
      filesAcl: 'public-read'
      sourceFolder: '$(Build.ArtifactStagingDirectory)'
      flattenFolders: true
  - bash: bash publish-build.sh quest
    displayName: "Publish build to site"
    condition: and(succeeded(), eq(variables.isMain, true))
    env: 
      PUBLISHING_SECRET: $(PublishingSecret)
  - bash: bash publish-sidequest.sh
    displayName: "Publish build to SideQuest"
    condition: and(succeeded(), eq(variables.isMain, true))
    env: 
      SIDEQUEST_TOKEN: $(SidequestToken)

# - job: Pico
#   pool:
#     vmImage: 'macOS-10.14'
#   steps:
#   - script: 'sdkmanager --install "ndk;21.0.6113669" 2>&1 | head'
#     displayName: "Install NDK"
#     env:
#       PATH: "/Users/runner/Library/Android/sdk/cmake/3.6.4111459/bin:/Applications/Android Studio.app/Contents/jre/jdk/Contents/Home/bin:~/Library/Android/sdk/platform-tools:~/Library/Android/sdk/tools/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin"
#       ANDROID_HOME: "~/Library/Android/sdk"
#   - task: DownloadSecureFile@1
#     name: releaseKeys
#     displayName: 'Download release signing keys'
#     inputs:
#       secureFile: 'android.release.keystore'
#   - script: |
#       echo Moving key into place...
#       ln -s $(releaseKeys.secureFilePath) $(Build.Repository.LocalPath)/android.release.keystore
#   - task: DownloadSecureFile@1
#     name: keyPasswords
#     displayName: 'Download signing passwords'
#     inputs:
#       secureFile: 'keys.properties'
#   - script: |
#       echo Moving key passwords into place...
#       ln -s $(keyPasswords.secureFilePath) $(Build.Repository.LocalPath)/keys.properties
#   - task: CMake@1
#     inputs:
#       workingDirectory: 'build'
#       cmakeArgs: "-DCMAKE_TOOLCHAIN_FILE=/Users/runner/Library/Android/sdk/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_NATIVE_API_LEVEL=27 -DANDROID_BUILD_TOOLS_VERSION=29.0.2 -DANDROID_SDK=/Users/runner/Library/Android/sdk -DJAVA_HOME=/Applications/Android\ Studio.app/Contents/jre/jdk/Contents/Home -DANDROID_KEYSTORE=$(Build.Repository.LocalPath)/android.release.keystore -DANDROID_KEYSTORE_PASS=\"pass:$(RELEASE_STORE_PASSWORD)\" -DANDROID_KEY_PASS=\"pass:$(RELEASE_KEY_PASSWORD)\" -DANDROID_VARIANT=pico .."
#   - script: env VERBOSE=1 make Alloverse
#     workingDirectory: build
#     displayName: "Make"
#   - script: bash rename-builds.sh
#     displayName: "Rename builds"
#   - task: CopyFiles@2
#     displayName: "Stage artifacts"
#     inputs:
#       contents: |
#         build/*.apk
#       targetFolder: $(Build.ArtifactStagingDirectory)
#   - task: PublishBuildArtifacts@1
#     displayName: "Publish artifacts"
#     inputs:
#       pathtoPublish: '$(Build.ArtifactStagingDirectory)'
#       artifactName: Alloverse_visor-Pico
#  - task: S3Upload@1
#    inputs:
#      awsCredentials: 'aws-ci'
#      regionName: 'eu-north-1'
#      bucketName: 'alloverse-downloads-prod'
#      globExpressions: '**/*.apk'
#      targetFolder: 'visor'
#      filesAcl: 'public-read'
#      sourceFolder: '$(Build.ArtifactStagingDirectory)'
#      flattenFolders: true
